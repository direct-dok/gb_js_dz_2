let a = 1, b = 1, c, d;

/* В данном примере, работает префиксная форма инкремента. Она увеличивает значение
   и сразу его возвращает. То есть в результате выражения ++a мы получаем 2. Если бы 
   форма инкремента была постфиксная, то мы бы получили 1
*/
c = ++a;
alert(c);


/* В данном примере, работает постфиксная форма инкремента. Она увеличивает значение
   операнда на единицу, но сразу не возвращает его. То есть в результате выражения a++ мы получаем 1. 
   Если бы форма инкремента была префиксная, как в предыдущем примере, то мы бы получили 2
*/
d = b++;
alert(d);


/* В данном примере, мы складываем два операнда, первый двойка, второй переменная. Ранее переменная "a", 
   была увеличена до двойки, и теперь, она при помощи префиксного инкремена, увеличивается на единицу и 
   сразу возвращается и мы получаем 2 + 3, что в результате дает 5
*/
c = 2 + ++a;
alert(c);

/* Переменная "b" выше по коду, была увеличена на единицу, и к моменту выполнения кода, в переменной "b", 
   лежит значение 2. Постфиксный инкремент, здесь отработает, но он не вернет увеличенное значение и при
   выполеннии данного кода, в переменной "b", по прежнему будет лежать значение 2. В итоге мы получаем 
   2 + 2 и результат 4
*/
d = 2 + b++;
alert(d);


/* В переменной "a" лежит значение 3, так как в примерах выше, к данной переменной применялся два раза 
   префиксный инкремент, что два раза увеличино значение переменной "a" на единицу, в итоге в переменной 
   "a", лежит значение 3
*/
alert(a);

/* Изначально в переменной "b" лежало значение 1, но по коду выше, к данной перменной два раза был применен
   оператор постфиксного инкремента, что увеличило значение переменной на 2, в итоге в переменной на момент 
   выполнения кода, лежит значение 3
*/
alert(b);